generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Restaurant {
  id           String     @id @default(cuid())
  name         String
  imageUrl     String
  deliveryFee  Decimal    @db.Decimal(10, 2)
  deliveryTime Int // in minutes
  categories   Category[] //many to many relationship
  products     Product[]
}

model Category {
  id          String       @id @default(cuid())
  name        String
  imageUrl    String
  restaurants Restaurant[] //many to many relationship
  products    Product[]
  createdAt   DateTime     @default(now())
}

model Product {
  id                 String     @id @default(cuid())
  name               String
  description        String
  imageUrl           String
  price              Decimal    @db.Decimal(10, 2)
  discountPercentage Int        @default(0)
  restaurantId       String //foreign key - one to many - restaurant reference
  restaurant         Restaurant @relation(fields: [restaurantId], references: [id])
  categoryId         String
  category           Category   @relation(fields: [categoryId], references: [id])
  createdAt          DateTime   @default(now())
}
 
model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])
}
 
model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@id([identifier, token])
}
 
// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([userId, credentialID])
}